plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.157'
}

version = mod_version
group = maven_group

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    } // Modrinth File
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { // Flywheel
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.jozufozu.flywheel")
        }
    }
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        // AE2
        url = "https://modmaven.dev/artifactory/local-releases/"
        content {
            includeGroup "appeng"
        }
    }
}

base {
    archivesName = "${project.name}-${minecraft_version}"
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withSourcesJar()
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main

        dependencies {
            runtime 'org.appliedenergistics.yoga:yoga:1.0.0'
        }
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    // JEI
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") { transitive = false }
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}") { transitive = false }
    implementation("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    // REI
    compileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}")
    compileOnly("me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}")
    compileOnly("me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}")

    // EMI
    compileOnly("dev.emi:emi-neoforge:${emi_version}:api")
    implementation("dev.emi:emi-neoforge:${emi_version}")

    // AE2
    compileOnly("appeng:appliedenergistics2-neoforge:${ae2_version}")

    // KJS
    compileOnly("dev.latvian.mods:kubejs-neoforge:${kjs_version}") {
        exclude(group: "dev.architectury")
    }

    //oculus
    compileOnly("maven.modrinth:embeddium:${embeddium_version}")
    compileOnly("maven.modrinth:oculus:${oculus_version}")


    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Yoga
    implementation 'org.appliedenergistics.yoga:yoga:1.0.0'
}

tasks.withType(ProcessResources).configureEach {
    // set up properties for filling into metadata
    var replaceProperties = [
            "mod_id": mod_id,
            "version": version,
            "loader_version": loader_version,
            "forge_version": neo_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version": minecraft_version,
            "mod_license": mod_license,
            "mod_name": mod_name,
            "mod_description": mod_description,
            "mod_url": mod_url
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }
    repositories {
        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASS")
            }
        }
    }
}
